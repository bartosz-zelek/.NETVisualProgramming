@page "/addproduct/{producerID:int}"
@using ZelekWieclaw.VisualProgrammingProject.BL
@using ZelekWieclaw.VisualProgrammingProject.Core
@using ZelekWieclaw.VisualProgrammingProject.Interfaces
@rendermode InteractiveServer
@inject ILogger<AddProduct> Logger
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<h3>Add Product</h3>

@if (beer == null)
{
    <p>Loading...</p>
}
else
{
    @if (showSuccessMessage)
    {
        <div class="alert alert-success" role="alert">
            Beer added successfully!
        </div>
    }

    <EditForm Model="@beer" OnValidSubmit="HandleValidSubmit" FormName="AddProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="beer.Name" />
            <ValidationMessage For="@(() => beer.Name)" />
        </div>
        <div class="mb-3">
            <label for="type" class="form-label">Type</label>
            <InputSelect id="type" class="form-control" @bind-Value="beer.Type">
                @foreach (var type in Enum.GetValues(typeof(BeerType)).Cast<BeerType>())
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => beer.Type)" />
        </div>
        <div class="mb-3">
            <label for="abv" class="form-label">ABV</label>
            <InputNumber id="abv" class="form-control" @bind-Value="beer.Abv" />
            <ValidationMessage For="@(() => beer.Abv)" />
        </div>
        <div class="mb-3">
            <label for="ibu" class="form-label">IBU</label>
            <InputNumber id="ibu" class="form-control" @bind-Value="beer.Ibu" />
            <ValidationMessage For="@(() => beer.Ibu)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <a href=@($"/producerbeers/{producerID}") class="btn btn-secondary">Go to producer</a>
    </EditForm>
}

@code {
    private BeerProductForm beer = new BeerProductForm();
    private CatalogService cs = new CatalogService();
    private bool showSuccessMessage = false;
    [Parameter]
    public int producerID { get; set; }

    private void HandleValidSubmit()
    {
        Logger.LogInformation($"Adding new beer: {beer.Name}");
        var newBeer = new BeerProduct
        {
            Name = beer.Name,
            Type = beer.Type,
            Abv = beer.Abv,
            Ibu = beer.Ibu,
            ProducerId = producerID
        };

        cs.AddBeerProduct(newBeer);
        showSuccessMessage = true;
    }

    public class BeerProductForm
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Type is required")]
        public BeerType Type { get; set; }

        [Required(ErrorMessage = "ABV is required")]
        [Range(0, 100, ErrorMessage = "ABV must be between 0 and 100")]
        public float Abv { get; set; }

        [Required(ErrorMessage = "IBU is required")]
        [Range(0, 120, ErrorMessage = "IBU must be between 0 and 120")]
        public int Ibu { get; set; }
    }

    public class BeerProduct : IBeerProduct
    {
        public int Id { get; set; }
        public int ProducerId { get; set; }
        public string Name { get; set; }
        public BeerType Type { get; set; }
        public float Abv { get; set; }
        public int Ibu { get; set; }
    }
}