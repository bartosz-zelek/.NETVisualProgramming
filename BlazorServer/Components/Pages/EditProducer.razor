@page "/editproducer/{producerID:int}"
@using System.ComponentModel.DataAnnotations
@using ZelekWieclaw.VisualProgrammingProject.BL
@using ZelekWieclaw.VisualProgrammingProject.Interfaces
@inject ILogger<EditProducer> Logger
@inject NavigationManager NavigationManager

<h3>Edit Producer</h3>

@if (Model != null)
{
    @if (showSuccessMessage)
    {
        <div class="alert alert-success" role="alert">
            Producer details updated successfully.
        </div>
    }

    <EditForm Model="@Model" OnValidSubmit="Submit" FormName="EditProducer">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="Model.Name" />
            <ValidationMessage For="@(() => Model.Name)" />
        </div>

        <div class="mb-3">
            <label for="country" class="form-label">Country</label>
            <InputText id="country" class="form-control" @bind-Value="Model.Country" />
            <ValidationMessage For="@(() => Model.Country)" />
        </div>

        <div class="mb-3">
            <label for="foundationYear" class="form-label">Foundation Year</label>
            <InputText id="foundationYear" class="form-control" @bind-Value="Model.FoundationYear" />
            <ValidationMessage For="@(() => Model.FoundationYear)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <a href="/" class="btn btn-secondary">Back</a>
    </EditForm>
}
else
{
    <p>Loading producer data...</p>
}

@code {
    [Parameter]
    public int producerID { get; set; }

    private CatalogService cs = new CatalogService();
    private IBeerProducer? producer;

    [SupplyParameterFromForm]
    private BeerProducerForm? Model { get; set; }
    private bool showSuccessMessage = false; // Flag to control notification display

    protected override void OnInitialized()
    {
        producer = cs.GetProducerById(producerID);
        if (producer != null && Model == null)
        {
            Model = new BeerProducerForm
                {
                    Id = producer.Id.ToString(),
                    Name = producer.Name,
                    FoundationYear = producer.FoundationYear,
                    Country = producer.Country
                };
        }
    }

    private void Submit()
    {
        producer.Name = Model.Name;
        producer.Country = Model.Country;
        producer.FoundationYear = Model.FoundationYear;
        cs.UpdateBeerProducer(producer);
        showSuccessMessage = true; // Show notification after successful update
    }

    public class BeerProducerForm
    {
        public string Id { get; set; }

        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Foundation Year is required.")]
        [RegularExpression(@"^\d{4}$", ErrorMessage = "Enter a valid year (e.g., 2023).")]
        public string FoundationYear { get; set; }

        [Required(ErrorMessage = "Country is required.")]
        public string Country { get; set; }
    }
}