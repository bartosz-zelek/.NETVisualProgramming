@page "/"

@using ZelekWieclaw.VisualProgrammingProject.BL
@using ZelekWieclaw.VisualProgrammingProject.Interfaces
@rendermode InteractiveServer
@inject ILogger<IBeerProducer> Logger

<h1>Beer Producers</h1>

@if (beerProducers == null)
{
    <p>Loading...</p>
}
else
{
    <!-- Search Form -->
    <EditForm Model="@Model" OnValidSubmit="HandleSearch" FormName="Search">
        <div class="input-group mb-3">
            <InputText id="searchTerm" class="form-control" @bind-Value="Model.SearchTerm" placeholder="Search Producers" />
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </EditForm>

    @if (!filteredProducers.Any())
    {
        <p>No beer producers found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var producer in filteredProducers)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        @producer.Name (@producer.Country) - Founded in @producer.FoundationYear
                    </span>
                    <span>
                        <a href="@($"/editproducer/{producer.Id}")" class="btn btn-sm btn-primary">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProducer(producer.Id)">Delete</button>
                    </span>
                </li>
            }
        </ul>
    }
}

@code {
    private IEnumerable<IBeerProducer>? beerProducers;
    private IEnumerable<IBeerProducer>? filteredProducers;
    private CatalogService cs = new CatalogService();

    [SupplyParameterFromForm]
    private SearchModel? Model { get; set; }

    protected override void OnInitialized()
    {
        beerProducers ??= cs.GetAllBeerProducers();
        filteredProducers ??= beerProducers;
        Model ??= new SearchModel();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(Model.SearchTerm))
        {
            filteredProducers = beerProducers
                .Where(p => p.Name.Contains(Model.SearchTerm, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            filteredProducers = beerProducers;
        }
    }

    private async Task DeleteProducer(int producerId)
    {
        Logger.LogInformation($"Deleting producer with ID: {producerId}");
        cs.DeleteBeerProducer(producerId);
        beerProducers = cs.GetAllBeerProducers();
        filteredProducers = beerProducers;
    }

    public class SearchModel
    {
        public string SearchTerm { get; set; }
    }
}